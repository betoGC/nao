
      0.2319365606E+02       0.1559162750E+00
      0.5389706871E+01       0.6076837186E+00
      0.1752899952E+01       0.3919573931E+00

S    3   1.00
      0.4077975514E+03       0.1543289673E+00
      0.7428083305E+02       0.5353281423E+00
      0.2010329229E+02       0.4446345422E+00
S    3   1.00
      0.2319365606E+02      -0.9996722919E-01
      0.5389706871E+01       0.3995128261E+00
      0.1752899952E+01       0.7001154689E+00

S    3   1.00
      0.1478740622E+01      -0.2196203690E+00
      0.4125648801E+00       0.2255954336E+00
      0.1614750979E+00       0.9003984260E+00

P    3   1.00
      0.1478740622E+01       0.1058760429E-01
      0.4125648801E+00       0.5951670053E+00
      0.1614750979E+00       0.4620010120E+00

    0 1

#print("=====================================================")
#print("===== P^(av) =====")
#prntMtrx(rho_av)
#print("===== S^(av) =====")
#prntMtrx(s_av)
#print("=====================================================")
#Solving generalized eigenvalue problem and return full basis (av,pnao) transformation

#print("===== P^(av)N=WS^(av)N (atom,l) blockwise diagonalization =====")
#print("===== W =====","\n",W_st)
#print("===== N =====")
#prntMtrx(N_st)
#print("===== ibasismap =====","\n",ibasismap_st)

p_al = np.zeros((nsh,nsh))
s_al = np.zeros((nsh,nsh))


#for i in range(nsh):
#  for j in range(nsh):
#    ifirst = shell_idx[i]
#    jfirst = shell_idx[j]
#    for im in range(ml_up):
#      for jm in range(ml_up):
#        p_al[i,j] += cA[ifirst+im,jfirst+jm]
#        s_al[i,j] += cB[ifirst+im,jfirst+jm]
#p_al/=ml_up
#s_al/=ml_up

for i in range(nsh):
  for j in range(nsh):
    ifirst = shell_idx[i]
    jfirst = shell_idx[j]
    #for im in range(ml_up):
    #  for jm in range(ml_up):
    #    if im == jm:
    #      cA[ifirst+im,jfirst+jm] = p_al[i,j]
    #      cB[ifirst+im,jfirst+jm] = s_al[i,j]
    #    else:
    #      cA[ifirst+im,jfirst+jm] = 0.
    #      cB[ifirst+im,jfirst+jm] = 0.
